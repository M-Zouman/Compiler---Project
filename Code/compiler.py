# -*- coding: utf-8 -*-
"""Compiler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qDgit7JCFsWrFjJYgrOyP_6_OAn9o503
"""

from tkinter import *
import re
import sys

delimiters = [',', ';', '/', '\\', ' ']
re_operaters = r"*|-|/|+|%|=|<=|>="
re_preemtive_types = r"boolean|byte|char|short|int|long|float|double"
re_non_preemtive_types = r"string|array|class"
re_keywords = r"var|and|or|not|if|elif|else|for|to|step|while|fun|then|end|return|continue|break"

re_float_number = r"[+-]?[0-9]+[.,][0-9]+"
re_integer_number = r"[+-]?[0-9]"
re_string = r"[A-Za-z0-9_./\-]*"
re_char = r"\W[0-9]\W|\W[a-zA-Z]\W"


def ifOperator(word):
    if re.match(re_operaters, word):
        return True
    return False


def ifPreemtiveType(word):
    if re.match(re_preemtive_types, word):
        return True
    return False


def ifNonPreemtiveType(word):
    if re.match(re_non_preemtive_types, word):
        return True
    return False


def ifKeyword(word):
    if re.match(re_keywords, word):
        return True
    return False


def ifFloat(word):
    if re.match(re_float_number, word):
        return True
    return False


def ifInteger(word):
    if re.search(re_integer_number, word):
        # if re.search(r"[a-zA-Z]|\W[0-9]\W",word):
        # return False
        return True
    return False


def ifString(word):
    if re.search(re_string, word):
        return True
    return False


def ifChar(word):
    if re.search(re_char, word):
        return True
    return False


def dfa(word, index_of_word, line_number):
    if index_of_word == 0:
        if ifKeyword(word):
            tokens.append(['KEYWORD', word])
            tokens_list.append((word, line_number, 'KEYWORD'))
            return
        if ifPreemtiveType(word):
            tokens.append(['DATATYPE', word])
            tokens_list.append((word, line_number, 'DATATYPE'))
            return
        if ifNonPreemtiveType(word):
            tokens.append(['DATATYPE', word])
            tokens_list.append((word, line_number, 'DATATYPE'))
            return
        print(
            "ERORR at line #{}: TYPO[DATATYPE, KEYWORD]. [{}]".format(i+1, word))
        tokens.append(['DATATYPE', word])
        return
        # sys.exit("ERORR at line #{}: TYPO. [{}]".format(i+1, word))

    # DELIMITER.
    deli_flag = False
    for delimiter in delimiters:
        if word[len(word) - 1] == delimiter:
            #print("ITS A DELIMITER", word)
            delimiter_type = delimiter
            deli_flag = True

    # identify identifiers.
    if tokens[len(tokens) - 1][0] == 'DATATYPE':
        if re.match("[a-z]|[A-Z]", word):
            tokens.append(['IDENTIFIER', word])
            tokens_list.append((word, line_number, 'IDENTIFIER'))
            return
        else:
            print("ERORR at line #{}: INVALID IDENTIFIER NAME[IDENTIFIER]. [{}]".format(
                i+1, word))
            return
            # sys.exit("ERORR at line #{}: INVALID IDENTIFIER NAME. [{}]".format(i+1, word))

    # identify operators.
    if ifOperator(word) == True:
        tokens.append(['OPERATOR', word])
        tokens_list.append((word, line_number, 'OPERATOR'))
        return

    # identify FLOAT.
    if ifFloat(word):
        if deli_flag == True:
            tokens.append(["FLOAT", word[:-1]])
            tokens_list.append((word[:-1], line_number, 'FLOAT'))
            tokens.append(['END_STATEMENT', delimiter_type])
            tokens_list.append(
                (word[len(word) - 1], line_number, 'END_STATEMENT'))
            return
        else:
            tokens.append(["FLOAT", word])
            tokens_list.append((word, line_number, 'FLOAT'))
            return

         # identify integer.
    if ifInteger(word):
        if deli_flag == True:
            tokens.append(["INTEGER", word[:-1]])
            tokens_list.append((word[:-1], line_number, 'INTEGER'))
            tokens.append(['END_STATEMENT', delimiter_type])
            tokens_list.append(
                (word[len(word) - 1], line_number, 'END_STATEMENT'))
            return
        else:
            tokens.append(["INTEGER", word])
            tokens_list.append((word, line_number, 'INTEGER'))
            return

    # identify Character.
    if ifChar(word):
        if deli_flag == True:
            tokens.append(["CHARACTER", word[:-1]])
            tokens_list.append((word[:-1], line_number, 'CHARACTER'))
            tokens.append(['END_STATEMENT', delimiter_type])
            tokens_list.append(
                (word[len(word) - 1], line_number, 'END_STATEMENT'))
            return
        else:
            tokens.append(["CHARACTER", word])
            tokens_list.append((word, line_number, 'CHARACTER'))
            return

         # identify STRING
    if ifString(word):
        if deli_flag == True:
            tokens.append(["STRING", word[:-1]])
            tokens_list.append((word[:-1], line_number, 'STRING'))
            tokens.append(['END_STATEMENT', delimiter_type])
            tokens_list.append(
                (word[len(word) - 1], line_number, 'END_STATEMENT'))
            return
        else:
            tokens.append(["STRING", word])
            tokens_list.append((word, line_number, 'STRING'))
            return
    print("ERORR at line #{}: ILLEGAL CHARACTER. [{}]".format(i+1, word))
    return True
    # sys.exit("ERORR at line #{}: INVALID IDENTIFIER NAME. [{}]".format(i+1, word))


f = open('test.txt', 'r+')
contents = f.readlines()
f.close()

tokens = []
tokens_list = []
counter = 0
for i in range(len(contents)):
    contents_at_line = contents[i].split()
    for word in contents_at_line:
        dfa(word, contents_at_line.index(word), i+1)

    print('--> Line #{}:'.format(i+1), end=' ')
    print(tokens[counter:])
    counter = len(tokens)

print("PROGRAM FINISHED...")


class Table:

    def __init__(self, root):
        # code for creating table
        for i in range(total_rows):
            for j in range(total_columns):
                self.e = Entry(root, width=20, fg='blue',
                               font=('Arial', 16, 'bold'))
                self.e.grid(row=i, column=j)
                self.e.insert(END, tokens_list[i][j])

# take the data
#lst = [(1,'Raj','Mumbai',19), (2,'Aaryan','Pune',18), (3,'Vaishnavi','Mumbai',20), (4,'Rachna','Mumbai',21), (5,'Shubham','Delhi',21)]


# find total number of rows and
# columns in list
total_rows = len(tokens_list)
total_columns = len(tokens_list[0])

# create root window
root = Tk()
t = Table(root)
root.mainloop()

"""old code vvv"""

''' f = open('test.txt', 'r+')
contents = f.readlines()
f.close()

tokens = []
counter = 0
for i in range(len(contents)):
  contents_at_line = contents[i].split()
  for word in contents_at_line:
    if word == contents_at_line[0]:
      if ifKeyword(word):
        tokens.append(['KEYWORD', word])
        continue
      if ifPreemtiveType(word): 
        tokens.append(['DATATYPE', word])
        continue
      if ifNonPreemtiveType(word):
        tokens.append(['DATATYPE', word])
        continue

      print("ERORR at line %d: TYPO." %i, word)

    # DELIMITER.
    deli_flag = False
    for delimiter in delimiters:
      if word[len(word) - 1] == delimiter:
        #print("ITS A DELIMITER", word)
        delimiter_type = delimiter
        deli_flag = True
      
    # identify identifiers.
    if re.match("[a-z]|[A-Z]", word):
      tokens.append(['IDENTIFIER', word])
      continue
    
    # identify operators.
    if ifOperator(word) == True:
      tokens.append(['OPERATOR', word])
      continue
    
    # identify FLOAT.
    if ifFloat(word):
      if deli_flag == True:
        tokens.append(["FLOAT", word[:-1]])
        tokens.append(['END_STATEMENT', delimiter_type])
        continue
      else:
        tokens.append(["FLOAT", word])
        continue
        
    # identify integer.
    if ifInteger(word):
      if deli_flag == True:
        tokens.append(["INTEGER", word[:-1]])
        tokens.append(['END_STATEMENT', delimiter_type])
        continue
      else:
        tokens.append(["INTEGER", word])
        continue

     # identify Character.
    if ifChar(word):
      if deli_flag == True:
        tokens.append(["CHARACTER", word[:-1]])
        tokens.append(['END_STATEMENT', delimiter_type])
        continue
      else:
        tokens.append(["CHARACTER", word])
        continue 

    # identify STRING
    if ifString(word):
      if deli_flag == True:
        tokens.append(["STRING", word[:-1]])
        tokens.append(['END_STATEMENT', delimiter_type])
        continue
      else:
        tokens.append(["STRING", word])
        continue

  print('Line %d:' %i, end = ' ')
  print(tokens[counter:])
  counter = len(tokens) '''

s = 'boolean', 'byte', 'char', 'short', 'int', 'long', 'float', 'double'
